#!/bin/bash
#
# Copyright 2015-2017 GaÃ«l PORTAY <gael.portay@gmail.com>
#
# Licensed under the MIT license.
#

set -e

PREFIX=/var/lib/mpkg
VERSION=0.1.2

die() {
	echo "Error: $*" >&2
	exit 1
}

get_value() {
	sed -n "/$1:/s,.*: *,,p"
}

extract_deb() {
	local destdir
	local pn
	destdir=${2:-.}
	pn=${1##*/}
	pn=${pn%.*}
	pn=${pn%%_*}

	if !  ar x   "$1" 2>/dev/null &&
	   ! tar xzf "$1" 2>/dev/null; then
		return 1
	fi

	install -d "$destdir$PREFIX/info/$pn/"
	tar xzf control.tar.gz -C "$destdir$PREFIX/info/$pn/"
	rm control.tar.gz

	tar xzf data.tar.gz -C "$destdir/"
	rm data.tar.gz

	rm debian-binary
}

files() {
	find "$1/" -type f | sed -e "s,^$1,," -e "\:^$PREFIX/:d"
}

package_tgz() {
	local tgzdir
	local pn
	tgzdir=${1:-.}
	pn=$(cat "$tgzdir$PREFIX/info/"*/control 2>/dev/null | get_value 'Package')
	if [ -z "$pn" ]; then
		die "$1: Invalid directory!"
	fi

	local pv
	pv=$(cat "$tgzdir$PREFIX/info/"*/control 2>/dev/null | get_value 'Version')
	pv=${pv:-0}
	local tgz
	tgz=${pn}_${pv}.tgz

	files "$tgzdir" >"$tgzdir$PREFIX/info/$pn/files"
	( cd "$tgzdir/" && tar czf "$OLDPWD/$tgz" --exclude="$1" -- * )
	echo "$tgz"
}

do_files() {
	files "${1:-.}"
}

do_deb2tgz() {
	local tmpdir
	tmpdir=${1%.*}

	install -d "$tmpdir/"
	extract_deb "$1" "$tmpdir"
	if ! $EXTRACT_ONLY; then
		if ! $FILES; then
			package_tgz "$tmpdir"
			rm -rf "${tmpdir}:?/"
		else
			do_list "$tmpdir"
		fi
	fi
}

usage() {
	cat <<EOF
Usage: ${0##*/} [OPTIONS] DEBIAN...

Options:
 --extract-only        Extract only.
 -f or --files         Print list of files.
 -h or --help          Display this message.
 -V or --version       Display the version.
EOF
}

parse_arguments() {
	EXTRACT_ONLY=false
	FILES=false

	while [ $# -ne 0 ]; do
		if [ "$1" = "--extract-only" ]; then
			EXTRACT_ONLY=true
		elif [ "$1" = "-l" ] || [ "$1" = "--files" ]; then
			FILES=true
		elif [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
			usage
			exit 0
		elif [ "$1" = "-V" ] || [ "$1" = "--version" ]; then
			echo $VERSION
			exit 0
		else
			args="$args $1"
		fi
		shift
	done
}

parse_arguments "$@"

if [ -z "$args" ]; then
	usage >&2
	echo  >&2
	die "Too few arguments!"
fi

for arg in $args; do
	if [ -d "$arg" ]; then
		for deb in *.deb *.ipk *.opk; do
			do_deb2tgz "$deb"
		done
	else
		do_deb2tgz "$arg"
	fi
done
